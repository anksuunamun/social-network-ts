{"version":3,"sources":["HOC/withAuthRedirect/withAuthRedirect.tsx","Components/Dialogs/Dialogs.module.css","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","AddMessageForm","React","memo","onSubmit","handleSubmit","createField","TextArea","PurpleButton","text","type","displayName","AddMessageReduxForm","reduxForm","form","Dialogs","onAddMessageFormSubmit","useCallback","data","addMessage","dialogs","useMemo","map","item","id","activeClassName","styles","activeUser","userName","messages","messageText","className","dialogsWrapper","usersWrapper","messagesWrapper","textareaWrapper","dialogsPage","dispatch","newMessage","addNewMessageAC"],"mappings":"8NAKMA,EAAkB,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAOhB,SAASE,EAAoBC,GAKlC,OAAOC,YAAQN,EAARM,EAJmB,SAACC,GACzB,IAAQL,EAAyBK,EAAzBL,OAAWM,EAAnB,YAAiCD,EAAjC,GACA,OAAO,mCAAGL,EAAS,cAACG,EAAD,eAAgBG,IAAsB,cAAC,IAAD,CAAUC,GAAI,kB,oBChB3EC,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,aAAe,8BAA8B,WAAa,4BAA4B,gBAAkB,iCAAiC,gBAAkB,mC,sHCWxNC,EAAiBC,IAAMC,MAAK,SAAUP,GAC1C,OACE,mCACE,uBAAMQ,SAAUR,EAAMS,aAAtB,UACGC,YAAYC,IAAU,cACvB,cAACC,EAAA,EAAD,CAAcC,KAAM,cAAeC,KAAM,mBAMjDT,EAAeU,YAAc,iBAE7B,IAAMC,EAAsBC,YAAyB,CAAEC,KAAM,kBAAjCD,CAAqDZ,GAE3Ec,EAAUb,IAAMC,MAAK,SAAUP,GACnC,IAAMoB,EAAyBC,uBAC7B,SAACC,GACCtB,EAAMuB,WAAWD,EAAKC,cAExB,CAACvB,EAAMuB,aAGHC,EAAUC,mBACd,kBACEzB,EAAMwB,QAAQE,KAAI,SAACC,GACjB,OACE,cAAC,IAAD,CAASzB,GAAE,oBAAeyB,EAAKC,IAAMC,gBAAiBC,IAAOC,WAA7D,SACGJ,EAAKK,UADsEL,EAAKC,SAKzF,CAAC5B,EAAMwB,UAGHS,EAAWR,mBACf,kBACEzB,EAAMiC,SAASP,KAAI,SAACC,GAClB,OAAO,8BAAoBA,EAAKO,aAAfP,EAAKC,SAE1B,CAAC5B,EAAMiC,WAGT,OACE,sBAAKE,UAAWL,IAAOM,eAAiB,kBAAxC,UACE,qBAAKD,UAAWL,IAAOO,aAAvB,SAAsCb,IACtC,qBAAKW,UAAWL,IAAOQ,gBAAvB,SAAyCL,IACzC,qBAAKE,UAAWL,IAAOS,gBAAvB,SACE,cAACvB,EAAD,CAAqBR,SAAUY,YAMvCD,EAAQJ,YAAc,UAEPI,Q,0BC1CAtB,sBAAiBE,aAbR,SAACL,GACvB,MAAO,CACL8B,QAAS9B,EAAM8C,YAAYhB,QAC3BS,SAAUvC,EAAM8C,YAAYP,aAIL,SAACQ,GAC1B,MAAO,CACLlB,WAAY,SAACmB,GAAD,OAAwBD,EAASE,YAAgBD,QAIjC3C,CAA6CoB","file":"static/js/6.96be8521.chunk.js","sourcesContent":["import React, { ComponentType } from 'react';\nimport { AppStateType } from '../../redux-store/redux-store';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\ntype MapStateToPropsType = {\n  isAuth: boolean;\n};\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n  const RedirectComponent = (props: MapStateToPropsType) => {\n    const { isAuth, ...restProps } = props;\n    return <>{isAuth ? <Component {...(restProps as T)} /> : <Redirect to={'/login'} />}</>;\n  };\n  return connect(mapStateToProps)(RedirectComponent);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__1fpWw\",\"usersWrapper\":\"Dialogs_usersWrapper__3glgI\",\"activeUser\":\"Dialogs_activeUser__E2j6p\",\"messagesWrapper\":\"Dialogs_messagesWrapper__ANfri\",\"textareaWrapper\":\"Dialogs_textareaWrapper__3fHK2\"};","import React, { useCallback, useMemo } from 'react';\nimport styles from './Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\nimport { DialogsPropsType } from './DialogsContainer';\nimport PurpleButton from '../Common/PurpleButton/PurpleButton';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { createField, TextArea } from '../Common/FieldControls/FieldControls';\n\ntype FormPropsType = {\n  addMessage: string;\n};\n\nconst AddMessageForm = React.memo(function (props: InjectedFormProps<FormPropsType>) {\n  return (\n    <>\n      <form onSubmit={props.handleSubmit}>\n        {createField(TextArea, 'addMessage')}\n        <PurpleButton text={'add message'} type={'submit'} />\n      </form>\n    </>\n  );\n});\n\nAddMessageForm.displayName = 'AddMessageForm';\n\nconst AddMessageReduxForm = reduxForm<FormPropsType>({ form: 'addMessageForm' })(AddMessageForm);\n\nconst Dialogs = React.memo(function (props: DialogsPropsType) {\n  const onAddMessageFormSubmit = useCallback(\n    (data: FormPropsType) => {\n      props.addMessage(data.addMessage);\n    },\n    [props.addMessage],\n  );\n\n  const dialogs = useMemo(\n    () =>\n      props.dialogs.map((item) => {\n        return (\n          <NavLink to={`/messages/${item.id}`} activeClassName={styles.activeUser} key={item.id}>\n            {item.userName}\n          </NavLink>\n        );\n      }),\n    [props.dialogs],\n  );\n\n  const messages = useMemo(\n    () =>\n      props.messages.map((item) => {\n        return <div key={item.id}>{item.messageText}</div>;\n      }),\n    [props.messages],\n  );\n\n  return (\n    <div className={styles.dialogsWrapper + ' contentWrapper'}>\n      <div className={styles.usersWrapper}>{dialogs}</div>\n      <div className={styles.messagesWrapper}>{messages}</div>\n      <div className={styles.textareaWrapper}>\n        <AddMessageReduxForm onSubmit={onAddMessageFormSubmit} />\n      </div>\n    </div>\n  );\n});\n\nDialogs.displayName = 'Dialogs';\n\nexport default Dialogs;\n","import Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport { AppStateType } from '../../redux-store/redux-store';\nimport { addNewMessageAC, DialogsReducerStateType } from '../../redux-store/Dialogs-reducer';\nimport { Dispatch } from 'redux';\nimport { withAuthRedirect } from '../../HOC/withAuthRedirect/withAuthRedirect';\n\ntype MapDispatchToPropsType = {\n  addMessage: (newMessage: string) => void;\n};\n\nexport type DialogsPropsType = MapDispatchToPropsType & DialogsReducerStateType;\n\nconst mapStateToProps = (state: AppStateType): DialogsReducerStateType => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    addMessage: (newMessage: string) => dispatch(addNewMessageAC(newMessage)),\n  };\n};\n\nexport default withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\n"],"sourceRoot":""}