{"version":3,"sources":["HOC/withAuthRedirect/withAuthRedirect.tsx","Components/Dialogs/Dialogs.module.css","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","auth","isAuth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","AddMessageForm","React","memo","onSubmit","handleSubmit","createField","TextArea","PurpleButton","text","type","AddMessageReduxForm","reduxForm","form","Dialogs","onAddMessageFormSubmit","useCallback","data","addMessage","dialogs","useMemo","map","item","id","activeClassName","styles","activeUser","userName","messages","messageText","className","dialogsWrapper","usersWrapper","messagesWrapper","textareaWrapper","dialogsPage","dispatch","newMessage","addNewMessageAC"],"mappings":"8NAMMA,EAAkB,SAACC,GACrB,MAAO,CACH,OAAUA,EAAMC,KAAKC,SAOtB,SAASC,EAAoBC,GAUhC,OAAOC,YAAQN,EAARM,EARmB,SAACC,GACvB,IAAOJ,EAAwBI,EAAxBJ,OAAWK,EAAlB,YAA+BD,EAA/B,GACA,OACI,mCACKJ,EAAS,cAACE,EAAD,eAAeG,IAAoB,cAAC,IAAD,CAAUC,GAAI,kB,oBCpB3EC,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,aAAe,8BAA8B,WAAa,4BAA4B,gBAAkB,iCAAiC,gBAAkB,mC,sHCWxNC,EAAiBC,IAAMC,MAAK,SAAUP,GACxC,OACI,mCACI,uBAAMQ,SAAUR,EAAMS,aAAtB,UACKC,YAAYC,IAAU,cACvB,cAACC,EAAA,EAAD,CAAcC,KAAM,cAAeC,KAAM,mBAMnDC,EAAsBC,YAAyB,CAACC,KAAM,kBAAhCD,CAAmDX,GA8ChEa,EA3CCZ,IAAMC,MAAK,SAAUP,GAEjC,IAAMmB,EAAyBC,uBAAY,SAACC,GACxCrB,EAAMsB,WAAWD,EAAKC,cACvB,CAACtB,EAAMsB,aAEJC,EAAUC,mBAAQ,kBAAMxB,EAAMuB,QAAQE,KACxC,SAAAC,GACI,OACI,cAAC,IAAD,CAASxB,GAAE,oBAAewB,EAAKC,IACtBC,gBAAiBC,IAAOC,WADjC,SAGKJ,EAAKK,UADIL,EAAKC,SAK5B,CAAC3B,EAAMuB,UAEJS,EAAWR,mBAAQ,kBAAMxB,EAAMgC,SAASP,KAC1C,SAAAC,GACI,OACI,8BACKA,EAAKO,aADAP,EAAKC,SAKxB,CAAC3B,EAAMgC,WAEV,OACI,sBAAKE,UAAWL,IAAOM,eAAiB,kBAAxC,UACI,qBAAKD,UAAWL,IAAOO,aAAvB,SACKb,IAEL,qBAAKW,UAAWL,IAAOQ,gBAAvB,SACKL,IAEL,qBAAKE,UAAWL,IAAOS,gBAAvB,SACI,cAACvB,EAAD,CAAqBP,SAAUW,Y,0BCnChCtB,sBAAiBE,aAfR,SAACL,GACrB,MAAO,CACH,QAAWA,EAAM6C,YAAYhB,QAC7B,SAAY7B,EAAM6C,YAAYP,aAIX,SAACQ,GACxB,MAAO,CACHlB,WAAY,SAACmB,GAAD,OAAwBD,EAASE,YAAgBD,QAMrC1C,CAA6CmB","file":"static/js/6.cb6fa9d3.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../../redux-store/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        'isAuth': state.auth.isAuth,\r\n    }\r\n}\r\ntype MapStateToPropsType = {\r\n    'isAuth': boolean\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props;\r\n        return (\r\n            <>\r\n                {isAuth ? <Component {...restProps as T}/> : <Redirect to={'/login'}/>}\r\n            </>\r\n        )\r\n    };\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__1fpWw\",\"usersWrapper\":\"Dialogs_usersWrapper__3glgI\",\"activeUser\":\"Dialogs_activeUser__E2j6p\",\"messagesWrapper\":\"Dialogs_messagesWrapper__ANfri\",\"textareaWrapper\":\"Dialogs_textareaWrapper__3fHK2\"};","import React, {useCallback, useMemo} from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport PurpleButton from '../Common/PurpleButton/PurpleButton';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, TextArea} from '../Common/FieldControls/FieldControls';\r\n\r\ntype FormPropsType = {\r\n    addMessage: string\r\n}\r\n\r\nconst AddMessageForm = React.memo(function (props: InjectedFormProps<FormPropsType>) {\r\n    return (\r\n        <>\r\n            <form onSubmit={props.handleSubmit}>\r\n                {createField(TextArea, 'addMessage')}\r\n                <PurpleButton text={'add message'} type={'submit'}/>\r\n            </form>\r\n        </>\r\n    )\r\n})\r\n\r\nconst AddMessageReduxForm = reduxForm<FormPropsType>({form: 'addMessageForm'})(AddMessageForm)\r\n\r\n\r\nconst Dialogs = React.memo(function (props: DialogsPropsType) {\r\n\r\n    const onAddMessageFormSubmit = useCallback((data: FormPropsType) => {\r\n        props.addMessage(data.addMessage);\r\n    }, [props.addMessage])\r\n\r\n    const dialogs = useMemo(() => props.dialogs.map(\r\n        item => {\r\n            return (\r\n                <NavLink to={`/messages/${item.id}`}\r\n                         activeClassName={styles.activeUser}\r\n                         key={item.id}>\r\n                    {item.userName}\r\n                </NavLink>\r\n            )\r\n        }\r\n    ), [props.dialogs])\r\n\r\n    const messages = useMemo(() => props.messages.map(\r\n        item => {\r\n            return (\r\n                <div key={item.id}>\r\n                    {item.messageText}\r\n                </div>\r\n            )\r\n        }\r\n    ), [props.messages])\r\n\r\n    return (\r\n        <div className={styles.dialogsWrapper + ' contentWrapper'}>\r\n            <div className={styles.usersWrapper}>\r\n                {dialogs}\r\n            </div>\r\n            <div className={styles.messagesWrapper}>\r\n                {messages}\r\n            </div>\r\n            <div className={styles.textareaWrapper}>\r\n                <AddMessageReduxForm onSubmit={onAddMessageFormSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Dialogs;","import Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux-store/redux-store';\r\nimport {addNewMessageAC, DialogsReducerStateType} from '../../redux-store/Dialogs-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect/withAuthRedirect';\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapDispatchToPropsType & DialogsReducerStateType;\r\n\r\nconst mapStateToProps = (state: AppStateType): DialogsReducerStateType => {\r\n    return {\r\n        'dialogs': state.dialogsPage.dialogs,\r\n        'messages': state.dialogsPage.messages,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessage: string) => dispatch(addNewMessageAC(newMessage)),\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));"],"sourceRoot":""}